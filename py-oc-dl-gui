#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import os
import configparser
import tkinter as tk
import sys
from tkinter import ttk
from tkinter import filedialog
# from tkinter import END, SEL, INSERT
from tkinter import END
import owncloud
from pathlib import Path
from owncloud import HTTPResponseError
from six.moves.urllib import parse

bg0 = "#121212"
bg1 = "#212121"
bg2 = "#303030"
bg3 = "#424242"
bg4 = "#616161"

nord0 = "#2E3440"
nord1 = "#3B4252"
nord2 = "#434C5E"
nord3 = "#4C566A"

# Snow Storm
nord4 = "#D8DEE9"
nord5 = "#E5E9F0"
nord6 = "#ECEFF4"

# Frost
nord7 = "#8FBCBB"
nord8 = "#88C0D0"
nord9 = "#81A1C1"
nord10 = "#5E81AC"

gray300 = "#E0E0E0"
gray600 = "#757575"
gray700 = "#616161"

tealA100 = "#A7FFEB"
teal300 = "#4DB6AC"

fg = "white"

bg_darkest = nord0
bg_darker = nord2
bg_dark = nord3
bg_dark_a1 = nord4
bg_dark_a2 = nord6

light = nord4

button_bg = nord4

progress_bg = nord1
progress_fg = nord4


# Class for parsing config .cfg file
class Settings(object):

    def __init__(self, configfile):
        self.config = configparser.ConfigParser(interpolation=None)
        self.config.read(configfile)

    def load(self, section, opts):
        try:
            for key in opts:
                try:
                    setattr(self, key, self.config.get(section, key))
                except configparser.NoOptionError:
                    setattr(self, key, self.config.get('default', key))

        except configparser.NoSectionError:
            print(f'The section "{section}" does not exist')
        except configparser.NoOptionError:
            print(f'The value for "{key}" is missing')
        else:
            return True
        return False


def total_size(list_):
    return sum([i["size"] for i in list_])


class OcExplorer(tk.Tk):

    def __init__(self, master=None):
        tk.Tk.__init__(self, master)
        # self.racine = master

        self.withdraw()
        self.config(background=bg_darkest)

        self.folder_path = "/"
        self.previous_folder_path = []
        self.folder_name = ""

        self.folder_list = []
        self.file_list = []

        self.directory = Path.home()
        # print(self.directory)

        self.oc = owncloud.Client(server)
        self._login()

        self.title("Dossiers Ownloud")

        self.s = ttk.Style()
        # self.s.theme_use('clam')
        self.s.configure("cool.Horizontal.TProgressbar",
                         relief="flat",
                         foreground=progress_fg, background=progress_fg,
                         troughcolor=progress_bg,
                         bordercolor=progress_bg)

        self.place_widgets()

        self._populate_list()

        self._alt_center(0)
        self.deiconify()

    def place_widgets(self):

        self.current_folder = tk.StringVar(value="/")

        self.frame = tk.Frame(self, background=bg_darkest, relief="flat")
        self.label_folder = tk.Label(self.frame,
                                     background=bg_dark,
                                     foreground=fg,
                                     font=("Roboto Mono", 16),
                                     anchor='w',
                                     textvariable=self.current_folder)

        self.lb = tk.Listbox(self.frame, width=60, height=8,
                             font=("Roboto Mono", 12),
                             background=bg_dark,
                             foreground=fg,
                             selectbackground=light,
                             relief="flat",
                             bd=0,
                             highlightthickness=0)

        self.frame.pack(fill="both", expand=1, padx=15, pady=15)
        self.label_folder.pack(anchor="nw", fill="x", pady=(0, 10))

        self.scrollbar = tk.Scrollbar(self.frame, orient="vertical", bd=0,
                                      bg=bg_dark_a1,
                                      activebackground=bg_dark_a2,
                                      troughcolor=bg_darker)
        self.scrollbar.config(command=self.lb.yview)
        self.scrollbar.pack(side="right", fill="y")

        self.lb.config(yscrollcommand=self.scrollbar.set)

        self.lb.pack(side="left", fill="both", expand=1)

        # Frame for files :
        self.frame2 = tk.Frame(self, background=bg_darkest, relief="flat")
        self.lb2 = tk.Listbox(self.frame2, width=60, height=8,
                              font=("Roboto Mono", 12),
                              background=bg_dark,
                              foreground=fg,
                              selectbackground=light,
                              relief="flat",
                              bd=0,
                              highlightthickness=0)
        self.frame2.pack(fill="both", expand=1, padx=15)

        self.scrollbar2 = tk.Scrollbar(self.frame2, orient="vertical", bd=0,
                                       bg=bg_dark_a1,
                                       activebackground=bg_dark_a2,
                                       troughcolor=bg_darker)

        self.scrollbar2.config(command=self.lb2.yview)
        self.scrollbar2.pack(side="right", fill="y")

        self.lb2.config(yscrollcommand=self.scrollbar2.set)

        self.lb2.pack(side="left", fill="both", expand=1)

        # Buttons
        self.bottom_bar = tk.Frame(self, background=bg_darker)
        self.bottom_bar.pack(side='bottom', pady=(10, 0), fill="x")

        self.bottom_center = tk.Frame(self.bottom_bar, background=bg_darker)
        self.bottom_center.pack(side='bottom', ipady=10)

        self.b1 = tk.Button(self.bottom_center, text="Précédent",
                            command=self._up,
                            bd=0, font=("Roboto", 12, "bold"),
                            width=14, height=2,
                            background=button_bg)

        self.b2 = tk.Button(self.bottom_center, text="Télécharger",
                            command=self._download_all,
                            bd=0, font=("Roboto", 12, "bold"),
                            width=14, height=2,
                            background=button_bg)

        self.b1.pack(side="left", padx=30)

        self.b2.pack(side="left", padx=30)

        self.lb.bind('<Double-Button-1>', self.double_click)

        self.progress = ttk.Progressbar(self, orient="horizontal",
                                        mode="determinate",
                                        style="cool.Horizontal.TProgressbar")
        self.progress.pack(fill='x', padx=15, pady=(10, 0))

        self.total_var = tk.IntVar(value=0)
        self.progress2 = ttk.Progressbar(self, orient="horizontal",
                                         mode="determinate",
                                         style="cool.Horizontal.TProgressbar",
                                         variable=self.total_var)
        self.progress2.pack(fill='x', padx=15, pady=(10, 0))

    def double_click(self, event):
        widget = event.widget
        selection = widget.curselection()
        index = selection[0]
        # value = widget.get(selection[0])
        # print("selection:", selection, ": '%s'" % value)
        self.previous_folder_path.append(self.folder_path)
        self.folder_path = self.folder_list[index]["path"]
        self.current_folder.set(value=self.folder_path)

        print(self.folder_path)
        self.folder_list = []
        self.lb.delete(0, tk.END)

        self.file_list = []
        self.lb2.delete(0, tk.END)

        # print('double mouse click event')
        self._populate_list()

    def _login(self):
        self.oc.login(user, password)
        print("Logged in !")

    def _up(self):
        self.folder_list = []
        self.lb.delete(0, tk.END)

        self.file_list = []
        self.lb2.delete(0, tk.END)

        try:
            self.folder_path = self.previous_folder_path.pop()
            self.current_folder.set(value=self.folder_path)
        except IndexError:
            pass
        self._populate_list()

    def _select(self):
        try:
            sel = self.lb.curselection()[0]
            s = self.folder_list[sel]["path"]
        except IndexError:
            s = self.folder_path

        # print(f"Cloud dir = {self.cloud_dir}")
        self.master.new_dir = s[1:] if s.startswith("/") else s
        # self.master.destroy()
        self.destroy()

    def _download_all(self):
        self.directory = filedialog.askdirectory(initialdir=Path.home(),
                                                 title='Please select a directory')  # noqa:E501
        if self.directory:
            self.progress["value"] = 0
            self.progress2["maximum"] = total_size(self.file_list)
            print(f"Total size is : {total_size(self.file_list)}")
            self.b2.config(state="disabled")
            for i in self.file_list:
                print(i["name"], i["path"], i["size"])
                # self.oc.get_file(i["path"])
                self.progress["value"] = 0
                self.progress["maximum"] = i["size"]
                local_file = os.path.join(self.directory,
                                          os.path.basename(i["path"]))
                self._get_file(i["path"], local_file)
            self.b2.config(state="normal")

    # This code comes from pyocclient
    # https://github.com/owncloud/pyocclient
    # and has been modified to implement progressbar
    def _get_file(self, remote_path, local_file=None):
        """Downloads a remote file

        :param remote_path: path to the remote file
        :param local_file: optional path to the local file. If none specified,
            the file will be downloaded into the current directory
        :returns: True if the operation succeeded, False otherwise
        :raises: HTTPResponseError in case an HTTP error status was returned
        """
        remote_path = owncloud.Client._normalize_path(remote_path)
        res = self.oc._session.get(
            self.oc._webdav_url + parse.quote(
                self.oc._encode_string(remote_path)),
            stream=True
        )
        if res.status_code == 200:
            if local_file is None:
                # use downloaded file name from Content-Disposition
                # local_file = res.headers['content-disposition']
                local_file = os.path.basename(remote_path)

            file_handle = open(local_file, 'wb', 8192)
            for index, chunk in enumerate(res.iter_content(8192), 1):
                file_handle.write(chunk)
                self.progress["value"] = index * 8192
                self.total_var.set(self.total_var.get() + 8192)
                self.update()
            file_handle.close()
            return True
        elif res.status_code >= 400:
            raise HTTPResponseError(res)
        return False

    def _populate_list(self):
        list_dir = self.oc.list(self.folder_path, depth=1)
        for item in list_dir:
            if item.is_dir():
                name = item.get_name()
                # full_path = file.get_path() + '/' + newName
                full_path = item.get_path()
                self.folder_list.append({'path': full_path, 'name': name})
            else:
                # if not file.is_dir():
                name = item.get_name()
                full_path = item.get_path() + '/' + name
                size = item.get_size()
                # full_path = file.get_path()
                print(name)
                self.file_list.append({'path': full_path,
                                       'name': name,
                                       'size': size})

        [self.lb.insert(END, item["name"]) for item in self.folder_list]
        [self.lb2.insert(END, item["name"]) for item in self.file_list]

    def _alt_center(self, pad):
        self.update_idletasks()
        width = self.winfo_reqwidth()
        height = self.winfo_reqheight()
        x = (self.winfo_screenwidth() // 2) - (width // 2) + pad
        y = (self.winfo_screenheight() // 2) - (height // 2) + pad
        self.geometry('{}x{}+{}+{}'.format(width, height, x, y))


# Config stuff
cfg_forum = 'myowncloud'

cfg_opts = ['host',
            'username',
            'password'
            ]


owncloud_cfg = '.owncloud.cfg'

home = str(Path.home())
owncloud_cfg_home = os.path.join(home, owncloud_cfg)

if os.path.isfile(owncloud_cfg):
    print(f"./{owncloud_cfg} found")
    use_cfg = owncloud_cfg
elif os.path.isfile(owncloud_cfg_home):
    print(f"{owncloud_cfg_home} found")
    use_cfg = owncloud_cfg_home
else:
    print("not found, either in local folder, or in home folder")
    print(f"Rename {owncloud_cfg}.exemple in {owncloud_cfg}")
    print("and put it in your HOME or your working folder")
    sys.exit(0)

cfg = Settings(use_cfg)
if cfg.load(cfg_forum, cfg_opts):
    user = cfg.username  # pylint: disable=no-member
    password = cfg.password  # pylint: disable=no-member
    server = cfg.host  # pylint: disable=no-member
else:
    print("Incorrect config.")
    sys.exit(0)


API_PATH = "ocs/v1.php/apps/files_sharing/api/v1"

# MAIN PROGRAM here :
app = OcExplorer()
app.mainloop()
